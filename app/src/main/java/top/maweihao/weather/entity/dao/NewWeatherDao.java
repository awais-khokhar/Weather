package top.maweihao.weather.entity.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NEW_WEATHER".
*/
public class NewWeatherDao extends AbstractDao<NewWeather, Long> {

    public static final String TABLENAME = "NEW_WEATHER";

    /**
     * Properties of entity NewWeather.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Status = new Property(0, String.class, "status", false, "STATUS");
        public final static Property Server_time = new Property(1, long.class, "server_time", true, "_id");
        public final static Property JsonString = new Property(2, String.class, "jsonString", false, "JSON_STRING");
    }


    public NewWeatherDao(DaoConfig config) {
        super(config);
    }
    
    public NewWeatherDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NEW_WEATHER\" (" + //
                "\"STATUS\" TEXT," + // 0: status
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 1: server_time
                "\"JSON_STRING\" TEXT);"); // 2: jsonString
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEW_WEATHER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NewWeather entity) {
        stmt.clearBindings();
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(1, status);
        }
        stmt.bindLong(2, entity.getServer_time());
 
        String jsonString = entity.getJsonString();
        if (jsonString != null) {
            stmt.bindString(3, jsonString);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NewWeather entity) {
        stmt.clearBindings();
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(1, status);
        }
        stmt.bindLong(2, entity.getServer_time());
 
        String jsonString = entity.getJsonString();
        if (jsonString != null) {
            stmt.bindString(3, jsonString);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 1);
    }    

    @Override
    public NewWeather readEntity(Cursor cursor, int offset) {
        NewWeather entity = new NewWeather( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // status
            cursor.getLong(offset + 1), // server_time
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // jsonString
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NewWeather entity, int offset) {
        entity.setStatus(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setServer_time(cursor.getLong(offset + 1));
        entity.setJsonString(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(NewWeather entity, long rowId) {
        entity.setServer_time(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(NewWeather entity) {
        if(entity != null) {
            return entity.getServer_time();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NewWeather entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
